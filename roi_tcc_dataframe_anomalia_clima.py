# -*- coding: utf-8 -*-
"""ROI.TCC.Dataframe.anomalia.clima.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lz0VjMrmiE7S7MaRQUOrN0YxUEvWyaLG

Este arquivo Colab foi criado para extrair as informações climáticas da minha área de estudo, que é a Região Geográfica Intermediária do Rio de Janeiro. Após a extração dos dados, é realizada a análise de anomalia anual para cada parâmetro, com o objetivo de avaliar as variações anuais dos dados climáticos. Utilizam-se os dados da normal climatológica do INMET (1981-2010) como comparação, permitindo que os anos sejam comparados com as médias dessa normal e que as diferenças negativas e positivas sejam consideradas. Os dados são provenientes do Terra Climate, que disponibiliza informações mensais desde 1958, incluindo:

- Evapotranspiração Atual

- Déficit Hídrico

- Índice de Severidade de Secas de Palmer

- Evapotranspiração de Referência

- Precipitação

- Escoamento Superficial

- Umidade do Solo

- Radiação de Onda Curta Descendente

- Equivalente de Água em Neve

- Temperatura Máxima

- Temperatura Mínima

- Pressão de Vapor

- Déficit de Pressão de Vapor

- Velocidade do Vento

#Passo 1: Instalar as Bibliotecas Necessárias
"""

pip install cartopy salem rasterio geopandas xarray pandas

"""#Carregar o limite da minha ROI

Acessar o Google Earth Engine (GEE) para acessar os documentos na conta
"""

# Instalar o pacote do Google Earth Engine
!pip install earthengine-api

# Autenticar o Google Earth Engine
import ee
ee.Authenticate()

# Inicializar o Google Earth Engine
ee.Initialize(project="amandianna")

"""Trazer o limite do GEE como string e colocar o limite em um mapa"""

import folium
import ee

# Inicializar a API do GEE
ee.Initialize()

# Definir a referência do seu arquivo no GEE como string
roi = ee.FeatureCollection('projects/amandianna/assets/ROI_TCC')

# Calcular o centro da geometria do ROI (pode ser o centro do 'bounding box')
roi_center = roi.geometry().centroid()

# Obter as coordenadas do centro como [latitude, longitude]
center_coords = roi_center.getInfo()['coordinates']

# Criar um mapa folium centrado nas coordenadas do ROI
my_map = folium.Map(location=[center_coords[1], center_coords[0]], zoom_start=12)

# Adicionar o ROI no mapa como um overlay
folium.GeoJson(roi.getInfo()).add_to(my_map)

# Exibir o mapa
my_map

"""#Passo 3: Carregar os Dados Climáticos e Extrair Médias Anuais

Acessando os dados do Terra Climate e salvando os dados climáticos em um arquivo .nc
"""

# URLs dos arquivos climáticos
filesnc = [
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_aet_1958_CurrentYear_GLOBE.nc',
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_def_1958_CurrentYear_GLOBE.nc',
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_pet_1958_CurrentYear_GLOBE.nc',
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_ppt_1958_CurrentYear_GLOBE.nc',
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_q_1958_CurrentYear_GLOBE.nc',
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_srad_1958_CurrentYear_GLOBE.nc',
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_swe_1958_CurrentYear_GLOBE.nc',
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_tmax_1958_CurrentYear_GLOBE.nc',
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_tmin_1958_CurrentYear_GLOBE.nc',
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_vap_1958_CurrentYear_GLOBE.nc',
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_vpd_1958_CurrentYear_GLOBE.nc',
    'http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_ws_1958_CurrentYear_GLOBE.nc'

]


# URLs não acessíveis para a região
'''http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_pdsi_1958_CurrentYear_GLOBE.nc''' #Índice de Severidade de Secas de Palmer
'''http://thredds.northwestknowledge.net:8080/thredds/dodsC/agg_terraclimate_soilm_1958_CurrentYear_GLOBE.nc''' # Umidade do Solo

"""Transformando o meu limite da área de estudo em um poligono que possibilita a extração de dados"""

import os
import xarray as xr
import salem
import geopandas as gpd
import ee

# Extrair as coordenadas da geometria da ROI
roi_geometry = roi.geometry()  # Obtém a geometria da ROI
roi_coords = roi_geometry.bounds().getInfo()  # Pega as coordenadas de bounding box
roi_bounds = roi_coords['coordinates'][0]  # Obter o bounding box (xmin, ymin, xmax, ymax)

# Usar as coordenadas para criar um GeoDataFrame
from shapely.geometry import box
import geopandas as gpd

# Extrair as coordenadas do bounding box da ROI
roi_geometry = roi.geometry()  # Obtém a geometria da ROI
roi_coords = roi_geometry.bounds().getInfo()  # Pega as coordenadas do bounding box
roi_bounds = roi_coords['coordinates'][0]  # Obter o bounding box (xmin, ymin, xmax, ymax)

# Aqui, ajustamos o código para acessar as coordenadas corretamente
xmin, ymin, xmax, ymax = roi_bounds[0][0], roi_bounds[0][1], roi_bounds[2][0], roi_bounds[2][1]

# Criar um GeoDataFrame com o bounding box da ROI
from shapely.geometry import box
import geopandas as gpd

# Criar o retângulo com as coordenadas corretas (xmin, ymin, xmax, ymax)
bbox = box(xmin, ymin, xmax, ymax)

# Criar o GeoDataFrame com a geometria do bounding box
roi_gdf = gpd.GeoDataFrame(geometry=[bbox], crs="EPSG:4326")

# Verificando o GeoDataFrame
print(roi_gdf)

"""Aqui ocorre a extração dos dados climáticos do arquivo .nc, restritos ao limite do polígono definido como área de estudo e salva como um NetCDF"""

# Iniciar array para os nomes de arquivo
fnames = []

# Definir o nome do arquivo com base no polígono
fname = "ROI_climate.nc"  # Nome único para o arquivo da ROI
if not os.path.exists(fname):
    dclimate = xr.Dataset()  # Inicializa os dados climáticos

    # Definir a geometria específica da ROI (área de estudo)
    roi_mun = roi_gdf  # Considera toda a ROI como um único polígono
    print(f'NetCDF aberto e pronto.', end="")

    # Processar os dados climáticos
    print(f'Iniciando laço para dados climáticos...', end="")
    for fnc in filesnc:  # Lista de arquivos NetCDF com os dados climáticos
        dset = xr.open_dataset(fnc)
        varname = list(dset.keys())[0]  # Extrai o nome da variável
        print(f'varname: {varname}.', end="")

        # Fazer subset e aplicar ROI
        myvar = dset.salem.subset(shape=roi_mun)  # Subset com bounding box
        myvar = myvar.salem.roi(shape=roi_mun)  # Apaga o que está fora do ROI
        myvar_mean = myvar[varname].mean(dim=('lat', 'lon')).rename(varname + '_mean')  # Média regional (por tempo)
        myvar_median = myvar[varname].median(dim=('lat', 'lon')).rename(varname + '_median')  # Mediana
        myvar_std = myvar[varname].std(dim=('lat', 'lon')).rename(varname + '_std')  # Desvio padrão
        dclimate = xr.merge([dclimate, myvar_mean, myvar_median, myvar_std], compat='no_conflicts')  # Merge

    # Gravar os dados climáticos
    dclimate.to_netcdf(fname)  # Grava o NetCDF
    print(f'Dados climáticos gravados no arquivo: {fname}')
    dclimate.close()
else:
    print(f'Arquivo de dados climáticos já existe: {fname}')

"""# Passo 4: Tratamento de dados para PCA

A normal climatológica do INMET para o período de 1981-2010 será definida no ambiente Colab, permitindo a comparação dos dados com a normal climatológica para o mesmo limite de estudo. Mais informações podem ser encontradas em: INMET Normais Climatológicas.
"""

# Abrir o arquivo gerado anteriormente
file_path = "ROI_climate.nc"
if os.path.exists(file_path):
    dset = xr.open_dataset(file_path)  # Abrir o arquivo NetCDF

    # Selecionar os dados climáticos da normal 1981-2010
    clima = dset.sel(time=slice('1981-01-01', '2010-12-01')).to_dataframe()
    clima['month'] = clima.index.month  # Extrair o mês da data
    clima = clima.groupby('month').mean()  # Média por mês

else:
    print(f"Arquivo {file_path} não encontrado.")

"""Podemos visualizar os dados que foram obtidos para a normal climatológica"""

clima

"""##Calculando a anomalia para cada mes para cada parametro"""

import pandas as pd
import numpy as np
# agora extraimos os dados e calculamos a anomalia com base na normal climatológica
dados = dset.sel(time=slice('1985-01-01','2021-12-01')).to_dataframe()
dados['month'] = dados.index.month

df_anomalia = pd.DataFrame().reindex_like(dados).fillna(np.nan)
dados2 = dados.reset_index().iloc[:,1:-1].values - clima.reset_index().iloc[dados.month.values-1,1:].values
df_anomalia.iloc[:,:-1] = dados2

"""Visualizando como ficou os dados para a anomalia"""

df_anomalia

"""Como só vamos utilizar as médias tiramos as colunas de mediana e de desvio padrão"""

import pandas as pd

# Remover as colunas que contêm 'median' e 'std'
columns_to_drop = ['swe_mean']+ [col for col in df_anomalia.columns if 'median' in col or 'std' in col]
final_df = df_anomalia.drop(columns=columns_to_drop)
final_df

"""Colocamos uma coluna para os meses do ano e uma para o ano de cada linha"""

final_df['year'] = final_df.index.year
final_df['month'] = final_df.index.month
final_df

"""Adicionamos o mes ao final do nome das colunas e transpomos os dados para facilitar a visualizaçã"""

# Reshape the DataFrame using pivot_table
reshaped_df = final_df.pivot_table(index='year',
                                  columns='month',
                                  values=final_df.columns[:-2]) # Exclude 'year' and 'month'

# Flatten the MultiIndex columns for better readability
reshaped_df.columns = ['_'.join(str(c) for c in col) for col in reshaped_df.columns]

# Display the reshaped DataFrame
reshaped_df

"""##Juntando as anomalias mensais para obter a anomalia anual por parâmetro

Aqui as colunas que contêm 'mean' no nome, tem a extração os prefixos delas antes do primeiro _, e cria uma lista com os prefixos únicos.
"""

cols_to_sum = [col for col in reshaped_df.columns if 'mean' in col]
prefixes = list({col.split('_')[0] for col in cols_to_sum})

"""Aqui é criado um DataFrame df2 contendo somas por linha das colunas de reshaped_df com base nos prefixos selecionados. Além disso, é adicionada uma coluna de ano e reorganiza as colunas para que o ano apareça primeiro."""

df2 = pd.DataFrame()

for col_prefix in prefixes:
    # Selecionando as colunas que começam com o prefixo
    cols_to_sum_group = [col for col in cols_to_sum if col.startswith(col_prefix)]
    df2[f'{col_prefix}_sum'] = reshaped_df[cols_to_sum_group].sum(axis=1)

# Use the index of reshaped_df to get the year values
df2['year'] = reshaped_df.index
cols = ['year'] + [col for col in df2.columns if col != 'year']
df2 = df2[cols]

"""Esse código salva o DataFrame df2 em um arquivo Excel chamado roi_tcc_df_anomalia_clima.xlsx"""

import os

base = os.getcwd() + '/'  # Get the current directory and add a trailing slash

df2.to_excel(base + 'roi_tcc_df_anomalia_clima.xlsx', index=False)

"""Aqui normalizamos os dados e plotamos todos os dados normalizados"""

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

df3 = df2.set_index('year')
df_normalized = pd.DataFrame(scaler.fit_transform(df3), columns=df3.columns)

df_normalized.index = df2.year
df_normalized.plot()

"""É possível analisar por pearson a correlação entre os dados normalizados"""

df_normalized.corr(method='pearson')

"""Definimos o nome do novo dataframe que é composto pelos dados normalizados"""

roi_tcc_df_anomalia_clima = df_normalized
roi_tcc_df_anomalia_clima

"""#Para salvar meu dataframe final no drive ou baixar como excel

##Salvando em excel
"""

from google.colab import files

# Save the DataFrame to an Excel file
roi_tcc_df_anomalia_clima.to_excel('roi_tcc_df_anomalia_clima.xlsx', index=True)

# Download the file to your computer
files.download('roi_tcc_df_anomalia_clima.xlsx')

"""##Exportando o df para o meu drive"""

from google.colab import drive
drive.mount('/content/drive')

# Caminho para salvar o DataFrame consolidado
caminho_arquivo_consolidado = '/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/roi_tcc_df_anomalia_clima.xlsx'

# Salvar o DataFrame consolidado como CSV
roi_tcc_df_anomalia_clima.to_excel(caminho_arquivo_consolidado, index=False)

print(f"Arquivo consolidado salvo em: {caminho_arquivo_consolidado}")

"""#Considerações finais:

##Significado das Variáveis e Estatísticas:

- aet: Actual Evapotranspiration (Evapotranspiração Real)

- def: Climate Water Deficit (Déficit Hídrico Climático)

- PDSI:Palmer Drought Severity Index

- pet: Potential Evapotranspiration (Evapotranspiração Potencial)

- ppt: Precipitação

- q:Runnof

- soil: Soil Moisture

- srad: radiação

- tmin: Minimum Temperature (Temperatura Mínima)

- tmax: MaximunTemperature (Temperatura Mínima)

- vap: Vapor Pressure (Pressão de Vapor)

- vpd: Vapor Pressure Deficit (Déficit de Pressão de Vapor)

- ws: Wind Speed (Velocidade do Vento)

- swe: Snow Water Equivalent

##Tipos de Estatísticas Calculadas:

- mean: Média dos valores da variável.

- median: Mediana dos valores da variável.

- std: Desvio padrão dos valores da variável, que mede a dispersão ou variação dos dados.

Dados obtidos de: http://thredds.northwestknowledge.net:8080/thredds/terraclimate_aggregated.html
"""