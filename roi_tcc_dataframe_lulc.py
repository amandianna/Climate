# -*- coding: utf-8 -*-
"""ROI.TCC.Dataframe.LULC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1N83lPZ7p5aqhzgM6wOUMLWxX04ZXPVVh

Este colab será dedicado para extrair as informações dos arquivos .tif salvos  no drive e montar um dataframe, para que seja possível trabalhar já com os valores em uma tabela.
#Dados de LULC do mapbiomas para a série histórica entre 1985 e 2021

#Conectar ao drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Importar bibliotecas necessárias"""

# Importar bibliotecas necessárias
!pip install rasterio
import rasterio
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""# Criar os dataframes para 1985 a 2021 isoladamente"""

import os
import rasterio
import pandas as pd

# Lista de anos a serem processados
anos = list(range(1985, 2022))

# Caminho onde estão os arquivos GeoTIFF
caminho_pasta = '/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/LULC_ROI_collection_9_100m/'  # Atualize com o caminho correto

# Caminho onde os arquivos CSV serão salvos
caminho_pasta_df = '/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/Lulc.csv/Valores pixel a pixel'  # Atualize com o caminho correto

# Loop para processar cada ano
for ano in anos:
    arquivo = f"{caminho_pasta}RJ_ROI_LULC_100m_{ano}.tif"  # Nome do arquivo (ajuste conforme necessário)

    # Verificar se o arquivo existe
    if not os.path.exists(arquivo):
        print(f"Arquivo para o ano {ano} não encontrado, pulando...")
        continue

    # Lista para armazenar os dados do ano atual
    dados = []

    # Abrir o arquivo GeoTIFF
    with rasterio.open(arquivo) as src:
        data = src.read(1)  # Lê a primeira banda
        transform = src.transform  # Obter a transformação espacial

        # Loop para extrair coordenadas e valores
        rows, cols = data.shape
        for row in range(rows):
            for col in range(cols):
                # Coordenadas geográficas
                x, y = rasterio.transform.xy(transform, row, col, offset='center')
                valor = data[row, col]

                # Adicionar ao DataFrame com formato de 4 casas decimais
                dados.append({'longitude': round(x, 6), 'latitude': round(y, 6), 'value': round(valor, 4)})

    # Converter a lista em um DataFrame
    df_ano = pd.DataFrame(dados)

    # Nome do arquivo CSV para o ano atual
    nome_arquivo_csv = f'df_raster_LULC_{ano}.csv'

    # Caminho completo para salvar o arquivo CSV
    caminho_arquivo_csv = os.path.join(caminho_pasta_df, nome_arquivo_csv)

    # Salvar o DataFrame como um arquivo CSV
    df_ano.to_csv(caminho_arquivo_csv, index=False)

    print(f"DataFrame para o ano {ano} salvo com sucesso em {caminho_arquivo_csv}!")

"""#Preciso reclassificar para que sejam menos classes na análise

O que preciso é que sejam feitas as novas classes:
1. Floresta: Quando o valor for 1,3, 4, 5, 6 e/ou 49, a célula assuma o valor de 1
2. Formação Natural não Florestal: Quando o valor for 10,11,12, 32, 29,50 assuma o valor de 2
3. Agropecuária: Quando o valor for 14 assuma o valor de 3
4. Pastagem: Quando o valor for 15 assuma o valor de 4
5. Agricultura: Quando o valor for 18 assuma o valor de 5
6. Lavoura Temporária: Quando o valor for 19,39,20, 40, 62 e/ou 41 assuma o valor de 6
7. Lavoura Perene: Quando o valor for de 36,46, 47, 35 e/ou 48 assuma o valor de 7
8. Silvicultura: Quando o valor for 9 assumir o valor de 8
9. Mosaico de Usos: Quando o valor for 21 assumir o valor de 9
10. Área não Vegetada: Quando o valor for 22,23,24, 30 e/ou 25 assumir o valor de 10
11. Corpo D'água: Quando o valor for 26,33 e/ou 31 assumir o valor de 11
12. Não observado: Quando o valor for 27 ou qualquer outro assumir o valor de 12
"""

import os
import pandas as pd

# Lista de anos a serem processados
anos_reclassificados = list(range(1985, 2022))

# Caminhos das pastas
caminho_pasta_raster = '/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/Lulc.csv/Valores pixel a pixel'
caminho_pasta_classificado = '/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/Lulc.csv/Reclassificados'

# Garantir que a pasta de saída existe
os.makedirs(caminho_pasta_classificado, exist_ok=True)

# Função para mapear os valores
def map_values(value):
    if value in [1, 3, 4, 5, 6, 49]:
        return 1
    elif value in [10, 11, 12, 32, 29, 50]:
        return 2
    elif value == 14:
        return 3
    elif value == 15:
        return 4
    elif value == 18:
        return 5
    elif value in [19, 39, 20, 40, 62, 41]:
        return 6
    elif value in [36, 46, 47, 35, 48]:
        return 7
    elif value == 9:
        return 8
    elif value == 21:
        return 9
    elif value in [22, 23, 24, 30, 25]:
        return 10
    elif value in [26, 33, 31]:
        return 11
    else:
        return 12

# Loop para processar cada ano
for ano in anos_reclassificados:
    arquivo = os.path.join(caminho_pasta_raster, f'df_raster_LULC_{ano}.csv')  # Nome do arquivo

    # Verificar se o arquivo existe
    if not os.path.exists(arquivo):
        print(f"Arquivo para o ano {ano} não encontrado, pulando...")
        continue

    # Carregar o arquivo CSV
    df = pd.read_csv(arquivo)

    # Aplicar a função de reclassificação em todas as colunas, exceto 'latitude' e 'longitude'
    colunas_reclassificar = [col for col in df.columns if col not in ['latitude', 'longitude']]
    for col in colunas_reclassificar:
        df[col] = df[col].apply(map_values)

    # Nome do arquivo CSV para o ano atual
    nome_arquivo_csv = f'df_classificado_LULC_{ano}.csv'

    # Caminho completo para salvar o arquivo CSV
    caminho_arquivo_csv = os.path.join(caminho_pasta_classificado, nome_arquivo_csv)

    # Salvar o DataFrame como um arquivo CSV
    df.to_csv(caminho_arquivo_csv, index=False)

    print(f"DataFrame para o ano {ano} salvo com sucesso em {caminho_arquivo_csv}!")

"""#Deixando o arquivo no formato de entrada pra PCA

Aqui contamos quantos pixels existem para a classe dada, como cada pixel é de 100 x 100m, contabilizamos então o número de pixels que contém o valor desta nova classificação
"""

import os
import pandas as pd

# Caminho da pasta onde estão os arquivos reclassificados
caminho_pasta_classificado = '/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/Lulc.csv/Reclassificados'

# Lista de anos a serem processados
anos_reclassificados_classes = list(range(1985, 2022))

# Garantir que a pasta de saída existe
os.makedirs(caminho_pasta_classificado, exist_ok=True)

# Loop para processar cada ano
for ano in anos_reclassificados_classes:
    # Caminho do arquivo para o ano atual
    arquivo = os.path.join(caminho_pasta_classificado, f'df_classificado_LULC_{ano}.csv')

    # Verificar se o arquivo existe
    if not os.path.exists(arquivo):
        print(f"Arquivo para o ano {ano} não encontrado, pulando...")
        continue

    # Carregar o DataFrame
    df = pd.read_csv(arquivo)

    # Apagar as duas primeiras colunas (latitude e longitude)
    df_pca = df.drop(df.columns[:2], axis=1)

    # Inicializar um DataFrame para armazenar os contadores
    contadores_df = pd.DataFrame()

    # Contar as ocorrências para cada uma das 12 classes
    for classe in range(1, 13):
        contagem = (df_pca == classe).sum().sum()  # Soma total de ocorrências da classe
        contadores_df.loc[classe, 'Classe'] = classe
        contadores_df.loc[classe, 'Contagem'] = contagem

    # Adicionar a informação do ano ao DataFrame
    contadores_df['Ano'] = ano

    # Reordenar as colunas
    contadores_df = contadores_df[['Ano', 'Classe', 'Contagem']]

    # Nome do arquivo de saída
    nome_arquivo_saida = f'Classificado_classes_contabilizadas_{ano}.csv'
    caminho_arquivo_saida = os.path.join(caminho_pasta_classificado, nome_arquivo_saida)

    # Salvar o DataFrame como CSV
    contadores_df.to_csv(caminho_arquivo_saida, index=False)

    print(f"Arquivo processado e salvo como: {caminho_arquivo_saida}")

"""Aqui enfim processamos para juntar os dados de cada ano para só um dataframe e facilitar a entrada desta informação na PCA"""

import os
import pandas as pd

# Caminho da pasta onde estão os arquivos salvos
caminho_pasta_classificado = '/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/Lulc.csv/Reclassificados'

# Caminho para salvar o DataFrame consolidado
caminho_arquivo_consolidado = '/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/roi_tcc_df_lulc.csv'

# Lista de anos a serem processados
anos_reclassificados_classes = list(range(1985, 2022))

# Inicializar um DataFrame consolidado
df_consolidado = pd.DataFrame(columns=['Ano'] + [f'Classe_{i}' for i in range(1, 13)])

# Loop para acessar cada arquivo e consolidar as informações
for ano in anos_reclassificados_classes:
    # Caminho do arquivo para o ano atual
    arquivo = os.path.join(caminho_pasta_classificado, f'Classificado_classes_contabilizadas_{ano}.csv')

    # Verificar se o arquivo existe
    if not os.path.exists(arquivo):
        print(f"Arquivo para o ano {ano} não encontrado, pulando...")
        continue

    # Carregar o arquivo CSV em um DataFrame
    df = pd.read_csv(arquivo)

    # Criar uma linha para o ano atual
    linha = {'Ano': ano}
    for classe in range(1, 13):
        # Preencher as contagens das classes na linha
        contagem = df[df['Classe'] == classe]['Contagem'].values[0] if classe in df['Classe'].values else 0
        linha[f'Classe_{classe}'] = contagem

    # Adicionar a linha ao DataFrame consolidado
    df_consolidado = pd.concat([df_consolidado, pd.DataFrame([linha])], ignore_index=True)

# Exibir o DataFrame consolidado
print(df_consolidado)

# Salvar o DataFrame consolidado como CSV
df_consolidado.to_csv(caminho_arquivo_consolidado, index=False)

print(f"Arquivo consolidado salvo em: {caminho_arquivo_consolidado}")