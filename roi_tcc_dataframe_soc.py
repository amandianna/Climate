# -*- coding: utf-8 -*-
"""ROI.TCC.Dataframe.SOC.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1078v70G2DsMdAPX9-RGwDeH3OkOJvyrC

Este colab será dedicado para extrair as informações dos arquivos .tif do drive e montar um dataframe, para que eu possa trabalhar já com os valores em uma tabela.

#Dados de Estoque de carbono do mapbiomas para a série histórica entre 1985 e 2021

#Conectar ao drive
"""

from google.colab import drive
drive.mount('/content/drive')

"""# Importar bibliotecas necessárias"""

# Importar bibliotecas necessárias
!pip install rasterio
import rasterio
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

"""# Criar os dataframes

## Criar o dataframe de 1985 a 2022
"""

import os
import rasterio
import pandas as pd

# Lista de anos a serem processados
anos = list(range(1985, 2022))

# Caminho onde estão os arquivos GeoTIFF
caminho_pasta = '/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/SOLO_ROI_100m/'  # Atualize com o caminho correto

# Caminho onde os arquivos CSV serão salvos
caminho_pasta_df = '/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/Solo.csv/Valor pixel a pixel'  # Atualize com o caminho correto

# Loop para processar cada ano
for ano in anos:
    arquivo = f"{caminho_pasta}RJ_ROI_SOC_100m_{ano}-cos_0_30cm_t_ha.tif"  # Nome do arquivo (ajuste conforme necessário)

    # Verificar se o arquivo existe
    if not os.path.exists(arquivo):
        print(f"Arquivo para o ano {ano} não encontrado, pulando...")
        continue

    # Lista para armazenar os dados do ano atual
    dados = []

    # Abrir o arquivo GeoTIFF
    with rasterio.open(arquivo) as src:
        data = src.read(1)  # Lê a primeira banda
        transform = src.transform  # Obter a transformação espacial

        # Loop para extrair coordenadas e valores
        rows, cols = data.shape
        for row in range(rows):
            for col in range(cols):
                # Coordenadas geográficas
                x, y = rasterio.transform.xy(transform, row, col, offset='center')
                valor = data[row, col]

                # Adicionar ao DataFrame com formato de 4 casas decimais
                dados.append({'longitude': round(x, 6), 'latitude': round(y, 6), 'value': round(valor, 4)})

    # Converter a lista em um DataFrame
    df_solo_ano = pd.DataFrame(dados)

    # Nome do arquivo CSV para o ano atual
    nome_arquivo_csv = f'df_solo_{ano}.csv'

    # Caminho completo para salvar o arquivo CSV
    caminho_arquivo_csv = os.path.join(caminho_pasta_df, nome_arquivo_csv)

    # Salvar o DataFrame como um arquivo CSV
    df_solo_ano.to_csv(caminho_arquivo_csv, index=False)

    print(f"DataFrame para o ano {ano} salvo com sucesso em {caminho_arquivo_csv}!")

"""#Melhorando o dataframe para colocar na PCA

Vou começar tirando as colunas de coordenada que não serão utilizadas e calculando o estoque total de carbono para a área de estudo para cada ano
"""

import pandas as pd
import os

# Caminho da pasta com os arquivos CSV
folder_path = "/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/Solo.csv/Valor pixel a pixel"

# Caminho para salvar o arquivo consolidado
output_file_soc_total = "/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/Solo.csv/Estoque"

# Lista de anos a serem processados
anos_soc_raster = list(range(1985, 2022))

# Loop para processar cada ano
for ano in anos_soc_raster:
    # Caminho do arquivo para o ano atual
    arquivo = os.path.join(folder_path, f'df_solo_{ano}.csv')

    # Verificar se o arquivo existe
    if not os.path.exists(arquivo):
        print(f"Arquivo para o ano {ano} não encontrado, pulando...")
        continue

    # Ler o arquivo CSV em um DataFrame
    df = pd.read_csv(arquivo)

    # Excluir as duas primeiras colunas (coordenadas)
    df = df.drop(df.columns[:2], axis=1)

    # Somar todos os valores restantes no DataFrame
    soma_total = df.sum().sum()

    # Criar um DataFrame para salvar o valor do estoque total de carbono
    df_somatorio = pd.DataFrame({'Ano': [ano], 'Estoque_Carbono_Total': [soma_total]})

    # Caminho para salvar o novo arquivo
    novo_arquivo = os.path.join(output_file_soc_total, f'Estoque_Carbono_Total_Ano{ano}.csv')

    # Salvar o DataFrame como CSV
    df_somatorio.to_csv(novo_arquivo, index=False)

    print(f"Arquivo para o ano {ano} processado e salvo como {novo_arquivo}")

"""Por último vamos juntar os dados para poder adiconar na PCA"""

import pandas as pd
import os

# Caminho da pasta com os arquivos de estoque de carbono
folder_path = "/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/Solo.csv/Estoque"

# Caminho para salvar o arquivo consolidado
output_file = "/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/roi_tcc_df_soc.csv"

# Lista de anos a serem processados
anos_soc_raster = list(range(1985, 2022))

# Inicializar uma lista para armazenar os dados
dados_totais = []

# Loop para processar cada ano
for ano in anos_soc_raster:
    # Caminho do arquivo para o ano atual
    arquivo = os.path.join(folder_path, f'Estoque_Carbono_Total_Ano{ano}.csv')

    # Verificar se o arquivo existe
    if not os.path.exists(arquivo):
        print(f"Arquivo para o ano {ano} não encontrado, pulando...")
        continue

    # Ler o arquivo
    df = pd.read_csv(arquivo)

    # Adicionar o ano e o valor total na lista
    dados_totais.append({'Ano': ano, 'Estoque_Carbono_Total': df['Estoque_Carbono_Total'].iloc[0]})

# Criar o DataFrame consolidado
df_consolidado = pd.DataFrame(dados_totais)

# Salvar o DataFrame consolidado como CSV
df_consolidado.to_csv(output_file, index=False)

print(f"Arquivo consolidado salvo com sucesso em {output_file}")

"""#Calculando a anomalia de SOC
Porém, como vamos considerar a anomalia de SOC por ano, comparado aos anos de 1985 a 1995, seguimos com as alterações no df para a entrada de dados na PCA

Definindo um espaço de tempo para calcular a anomalia de carbono para esta média deste período e depois calculando a anomalia
"""

import pandas as pd
import os

# Caminho do arquivo consolidado
input_file = "/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/roi_tcc_df_soc.csv"

# Caminho para salvar o arquivo de anomalias
output_file = "/content/drive/MyDrive/2024/Faculdade/TCC/Arquivos_coolab/Versão_atual/Dataframes/roi_tcc_df_anomalia_soc.csv"

# Ler o arquivo consolidado
df_soc = pd.read_csv(input_file)

# Calcular a média dos 10 primeiros anos (1985 a 1994)
media_10_anos = df_soc[df_soc['Ano'].between(1985, 1994)]['Estoque_Carbono_Total'].mean()

# Criar uma cópia do DataFrame para calcular a anomalia
df_anomalia = df_soc.copy()

# Calcular a anomalia subtraindo a média dos 10 primeiros anos
df_anomalia['Anomalia_Estoque_Carbono'] = df_anomalia['Estoque_Carbono_Total'] - media_10_anos

# Salvar o DataFrame de anomalias
df_anomalia.to_csv(output_file, index=False)

print(f"Arquivo de anomalias salvo com sucesso em {output_file}")